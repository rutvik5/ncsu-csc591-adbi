eBayAuctions<- read_xls('ebayAuction.xls')
library(readxl)
eBayAuctions<- read_xls('ebayAuction.xls')
library(readxl)
eBayAuctions<- read_xls('eBayAuctions.xls')
eBayAuctions$Category<- as.factor(eBayAuctions$Category)
eBayAuctions$endDay<- as.factor(eBayAuctions$endDay)
eBayAuctions$currency<- as.factor(eBayAuctions$currency)
library(reshape2)
library(readxl)
library(reshape2)
#read the excel file into a dataframe
ebayAuctions<- read_xls("ebayAuctions.xls")
#read the excel file into a dataframe
ebayAuctions<- read_xls("ebayAuctions.xls")
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(ebayAuctions),nrow(ebayAuctions)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- ebayAuctions[splt,]
test<- ebayAuctions[-splt,]
pivot.data<-data.frame(ebayAuctions$Category,ebayAuctions$currency,ebayAuctions$Duration,ebayAuctions$endDay,ebayAuctions$`Competitive?`)
response.avg<- mean(ebayAuctions$`Competitive?`)
print(train)
View(pivot.data)
View(pivot.data)
View(ebayAuctions)
View(ebayAuctions)
View(ebayAuctions)
categorycols = c(ebayAuctions$Category,ebayAuctions$currency,ebayAuctions$Duration,ebayAuctions$endDay)
category_response_df = data.frame(categorycols, ebayAuctions$`Competitive?`)
View(category_response_df)
View(category_response_df)
View(ebayAuctions)
rm(ebayAuctions)
#read the excel file into a dataframe
ebayAuctions<- read_xls("eBayAuctions.xls")
rm(ebayAuctions)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
pivot1 = cast(category_response_df, categorycols~ eBayAuctions$`Competitive?`)
library(readxl)
library(reshape2)
pivot1 = cast(category_response_df, categorycols~ eBayAuctions$`Competitive?`)
pivot1 = dcast(category_response_df, categorycols~ eBayAuctions$`Competitive?`)
pivot1 = dcast(category_response_df, categorycols~ eBayAuctions$`Competitive?`,mean)
View(pivot1)
View(pivot1)
pivot1 = dcast(category_response_df, Category~ eBayAuctions$`Competitive?`,mean)
pivot1 = dcast(category_response_df, eBayAuctions$Category~ eBayAuctions$`Competitive?`,mean)
View(pivot1)
View(pivot1)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ eBayAuctions$`Competitive?`,mean)
View(pivot_currency)
View(pivot_currency)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ eBayAuctions$`Competitive?`,mean)
View(pivot1)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ variable,mean)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ ,mean)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ .,mean)
View(pivot1)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ .,mean)
View(pivot_currency)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category,mean)
~ .
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ .,mean)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ var1,mean)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ 'mean',mean)
pivot1 = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_category = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(category_response_df, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(category_response_df, eBayAuctions$endDay~ 'Response',mean)
View(pivot_duration)
View(pivot_endDay)
View(pivot_category)
View(pivot_category)
View(pivot_category)
pivot_category[2]
mean(pivot_category[2])
mean<-mean(pivot_category[2]
d
mean<-mean(pivot_category[2])
pivot_category = dcast(eBayAuctions, eBayAuctions$Category, mean)
~ 'Response'
pivot_category = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_currency = dcast(eBayAuctions, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(eBayAuctions, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(eBayAuctions, eBayAuctions$endDay~ 'Response',mean)
pivot_category = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_endDay = dcast(category_response_df, eBayAuctions$endDay~ 'Response',mean)
library(readxl)
library(reshape2)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(eBayAuctions),nrow(eBayAuctions)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- eBayAuctions[splt,]
test<- eBayAuctions[-splt,]
categorycols = c(eBayAuctions$Category,eBayAuctions$currency,eBayAuctions$Duration,eBayAuctions$endDay)
category_response_df = data.frame(categorycols, eBayAuctions$`Competitive?`)
pivot_category = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(category_response_df, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(category_response_df, eBayAuctions$endDay~ 'Response',mean)
library(readxl)
library(fastDummies)
# Source data from xlsx
eBayAuctions <- read_excel("eBayAuctions.xls")
# Clean data
colnames(eBayAuctions)[8] <- "Competitive"  # Sane column names
# Source data from xlsx
eBayAuctions <- read_excel("eBayAuctions.xls")
# Clean data
colnames(eBayAuctions)[8] <- "Competitive"  # Sane column names
eBayAuctions$Duration <- as.factor(eBayAuctions$Duration)    # Define duration as categorical var
pivot_currency <- summarise(group_by(eBayAuctions, currency), Competitive=mean(Competitive))
install.packages("fastDummies")
pivot_currency <- summarise(group_by(eBayAuctions, currency), Competitive=mean(Competitive))
pivot_category <- summarise(group_by(eBayAuctions, Category), Competitive=mean(Competitive))
pivot_endDay <- summarise(group_by(eBayAuctions, endDay), Competitive=mean(Competitive))
pivot_duration <- summarise(group_by(eBayAuctions, Duration), Competitive=mean(Competitive))
library(readxl)
library(reshape2)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(eBayAuctions),nrow(eBayAuctions)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- eBayAuctions[splt,]
test<- eBayAuctions[-splt,]
categorycols = c(eBayAuctions$Category,eBayAuctions$currency,eBayAuctions$Duration,eBayAuctions$endDay)
category_response_df = data.frame(categorycols, eBayAuctions$`Competitive?`)
pivot_category = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(category_response_df, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(category_response_df, eBayAuctions$endDay~ 'Response',mean)
library(readxl)
library(reshape2)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
colnames(eBayAuctions)[8] <- "Competitive"
eBayAuctions$Duration <- as.factor(eBayAuctions$Duration)
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(eBayAuctions),nrow(eBayAuctions)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- eBayAuctions[splt,]
test<- eBayAuctions[-splt,]
pivot_category = dcast(eBayAuctions, eBayAuctions$Category~ 'Response',mean)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(category_response_df, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(category_response_df, eBayAuctions$endDay~ 'Response',mean)
#############
fit.all <- glm(Competitive ~., data = train, family = binomial(link="logit"))
View(fit.all)
summary(fit.all)
pivot_currency = dcast(category_response_df, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(category_response_df, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(category_response_df, eBayAuctions$endDay~ 'Response',mean)
pivot_currency = dcast(eBayAuctions, eBayAuctions$currency~ 'Response',mean)
pivot_duration = dcast(eBayAuctions, eBayAuctions$Duration~ 'Response',mean)
pivot_endDay = dcast(eBayAuctions, eBayAuctions$endDay~ 'Response',mean)
#############
fit.all <- glm(Competitive ~., data = train, family = binomial(link="logit"))
summary(fit.all)
max(abs(fit.all$coefficients))
shrinked_data = eBayAuctions[,c("sellerRating","ClosePrice", "OpenPrice")]
View(shrinked_data)
View(pivot_category)
View(eBayAuctions)
library(dummies)
install.packages("dummies")
library(dummies)
category<- cbind(eBayAuctions, dummy(eBayAuctions$Category, sep = "_"))
View(category)
library(readxl)
library(reshape2)
library(dummies)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
colnames(eBayAuctions)[8] <- "Competitive"
eBayAuctions$Duration <- as.factor(eBayAuctions$Duration)
dummy_category<- cbind(eBayAuctions, dummy(eBayAuctions$Category, sep = "_"))
dummy_currency<- cbind(eBayAuctions, dummy(eBayAuctions$currency, sep = "_"))
dummy_duration<- cbind(eBayAuctions, dummy(eBayAuctions$Duration, sep = "_"))
dummy_endDay<- cbind(eBayAuctions, dummy(eBayAuctions$endDay, sep = "_"))
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(eBayAuctions),nrow(eBayAuctions)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- eBayAuctions[splt,]
test<- eBayAuctions[-splt,]
shrinked_data = data.frame(eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice)
View(shrinked_data)
shrinked_data = data.frame(eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice, dummy_category$eBayAuctions_Automotive)
View(shrinked_data)
shrinked_data = data.frame(eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice, dummy_category$eBayAuctions_Automotive, dummy_category$eBayAuctions_Books, dummy_category$`eBayAuctions_Business/Industrial`)
shrinked_data = data.frame(eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice, dummy_category$eBayAuctions_Automotive, dummy_category$eBayAuctions_Books, dummy_category$`eBayAuctions_Business/Industrial`, dummy_category$`eBayAuctions_Music/Movie/Game`, dummy_category$eBayAuctions_EverythingElse, dummy_category$eBayAuctions_Photography, dummy_currency$eBayAuctions_GBP, dummy_currency$eBayAuctions_US, dummy_duration$eBayAuctions_10, dummy_duration$eBayAuctions_3, dummy_duration$eBayAuctions_5, dummy_endDay$eBayAuctions_Sat, dummy_endDay$eBayAuctions_Thu, dummy_endDay$eBayAuctions_Sun, dummy_endDay$eBayAuctions_Mon)
shrinked_data = data.frame(eBayAuctions$Competitive ,eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice, dummy_category$eBayAuctions_Automotive, dummy_category$eBayAuctions_Books, dummy_category$`eBayAuctions_Business/Industrial`, dummy_category$`eBayAuctions_Music/Movie/Game`, dummy_category$eBayAuctions_EverythingElse, dummy_category$eBayAuctions_Photography, dummy_currency$eBayAuctions_GBP, dummy_currency$eBayAuctions_US, dummy_duration$eBayAuctions_10, dummy_duration$eBayAuctions_3, dummy_duration$eBayAuctions_5, dummy_endDay$eBayAuctions_Sat, dummy_endDay$eBayAuctions_Thu, dummy_endDay$eBayAuctions_Sun, dummy_endDay$eBayAuctions_Mon)
library(readxl)
library(reshape2)
library(dummies)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
colnames(eBayAuctions)[8] <- "Competitive"
eBayAuctions$Duration <- as.factor(eBayAuctions$Duration)
dummy_category<- cbind(eBayAuctions, dummy(eBayAuctions$Category, sep = "_"))
dummy_currency<- cbind(eBayAuctions, dummy(eBayAuctions$currency, sep = "_"))
dummy_duration<- cbind(eBayAuctions, dummy(eBayAuctions$Duration, sep = "_"))
dummy_endDay<- cbind(eBayAuctions, dummy(eBayAuctions$endDay, sep = "_"))
shrinked_data = data.frame(eBayAuctions$Competitive ,eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice, dummy_category$eBayAuctions_Automotive, dummy_category$eBayAuctions_Books, dummy_category$`eBayAuctions_Business/Industrial`, dummy_category$`eBayAuctions_Music/Movie/Game`, dummy_category$eBayAuctions_EverythingElse, dummy_category$eBayAuctions_Photography, dummy_currency$eBayAuctions_GBP, dummy_currency$eBayAuctions_US, dummy_duration$eBayAuctions_10, dummy_duration$eBayAuctions_3, dummy_duration$eBayAuctions_5, dummy_endDay$eBayAuctions_Sat, dummy_endDay$eBayAuctions_Thu, dummy_endDay$eBayAuctions_Sun, dummy_endDay$eBayAuctions_Mon)
######Splitting into train and test data
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(shrinked_data),nrow(shrinked_data)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- shrinked_data[splt,]
test<- shrinked_data[-splt,]
fit.all <- glm(Competitive ~., data = train, family = binomial(link="logit"))
View(shrinked_data)
fit.all <- glm(train$eBayAuctions.Competitive ~., data = train, family = binomial(link="logit"))
summary(fit.all)
max(abs(fit.all$coefficients))
fit.single<- glm(train$eBayAuctions.Competitive~ train$dummy_category.eBayAuctions_EverythingElse, family = binomial(link='logit'))
summary(fit.single)
#####
sort(fit.all$coefficients)
#####
sort(fit.all$coefficients, decreasing=TRUE)
#####
sort(abs(fit.all$coefficients), decreasing=TRUE)
summary(fit.all)
summary(fit.all)
fit.reduced<- glm(train$eBayAuctions.Competitive~ train$eBayAuctions.OpenPrice+train$eBayAuctions.ClosePrice+train$dummy_category.eBayAuctions_Automotive+train$dummy_category.eBayAuctions_EverythingElse+train$dummy_currency.eBayAuctions_GBP+train$dummy_currency.eBayAuctions_US+train$dummy_duration.eBayAuctions_5+train$dummy_endDay.eBayAuctions_Mon)
summary(fit.reduced)
anova(fit.reduced, fit.all, test='Chisq')
anova(fit.all,fit.reduced test='Chisq')
anova(fit.all,fit.reduced ,test='Chisq')
summary(fit.all)
View(shrinked_data)
qcc.overdispersion.test(train$`,size = rep(50,length(train$eBayAuctions.Competitive)),type = "binomial")
s
c
csasc
qcc.overdispersion.test(train$`,size = rep(50,length(train$eBayAuctions.Competitive)),type = "binomial")
#Dispersion test on data
qcc.overdispersion.test(trainData$`Competitive?`,size = length(trainData$`Competitive?`),type = "binomial")
#Compare two models using anova function and performing Chi-square test
anova(fit.reduced,fit.all, test = "Chisq")
#Compare two models using anova function and performing Chi-square test
aov<- anova(fit.reduced,fit.all, test = "Chisq")
#Dispersion test on data
aov[1]
#Dispersion test on data
aov[1][2]
#Dispersion test on data
aov[1]
aov[2]
#Dispersion test on data
aov[2,1]
aov[2,2]
dispersion = residual_deviance / residual_df
residual_deviance<- aov[2,2]
dispersion = residual_deviance / residual_df
#Dispersion test on data
residual_df<- aov[2,1]
dispersion = residual_deviance / residual_df
print(dispersion)
library(readxl)
library(dummies)
#read the excel file into a dataframe
eBayAuctions<- read_xls("eBayAuctions.xls")
#cleaning data
colnames(eBayAuctions)[8] <- "Competitive"
eBayAuctions$Duration <- as.factor(eBayAuctions$Duration)
#generating dummy variables
dummy_category<- cbind(eBayAuctions, dummy(eBayAuctions$Category, sep = "_"))
dummy_currency<- cbind(eBayAuctions, dummy(eBayAuctions$currency, sep = "_"))
dummy_duration<- cbind(eBayAuctions, dummy(eBayAuctions$Duration, sep = "_"))
dummy_endDay<- cbind(eBayAuctions, dummy(eBayAuctions$endDay, sep = "_"))
#reduced the dummy variables that are similar to each other
shrinked_data = data.frame(eBayAuctions$Competitive ,eBayAuctions$sellerRating, eBayAuctions$OpenPrice, eBayAuctions$ClosePrice, dummy_category$eBayAuctions_Automotive, dummy_category$eBayAuctions_Books, dummy_category$`eBayAuctions_Business/Industrial`, dummy_category$`eBayAuctions_Music/Movie/Game`, dummy_category$eBayAuctions_EverythingElse, dummy_category$eBayAuctions_Photography, dummy_currency$eBayAuctions_GBP, dummy_currency$eBayAuctions_US, dummy_duration$eBayAuctions_10, dummy_duration$eBayAuctions_3, dummy_duration$eBayAuctions_5, dummy_endDay$eBayAuctions_Sat, dummy_endDay$eBayAuctions_Thu, dummy_endDay$eBayAuctions_Sun, dummy_endDay$eBayAuctions_Mon)
#randomly picks 60% of the rows from the dataset
splt<- sort(sample(nrow(shrinked_data),nrow(shrinked_data)*0.6))
#allocates 60% of the data for training and the remaining 40% for testing
train<- shrinked_data[splt,]
test<- shrinked_data[-splt,]
#calculate fit.all glm model on training data
fit.all <- glm(train$eBayAuctions.Competitive ~., data = train, family = binomial(link="logit"))
summary(fit.all)
max(abs(fit.all$coefficients))
#calculate fit.single glm model for category$EverythingElse
fit.single<- glm(train$eBayAuctions.Competitive~ train$dummy_category.eBayAuctions_EverythingElse, family = binomial(link='logit'))
summary(fit.single)
#####
#sort the coefficients of fit.all to find the top 4 predictors
sort(abs(fit.all$coefficients), decreasing=TRUE)
#build the reduced model
fit.reduced<- glm(train$eBayAuctions.Competitive~ train$eBayAuctions.OpenPrice+train$eBayAuctions.ClosePrice+train$dummy_category.eBayAuctions_Automotive+train$dummy_category.eBayAuctions_EverythingElse+train$dummy_currency.eBayAuctions_GBP+train$dummy_currency.eBayAuctions_US+train$dummy_duration.eBayAuctions_5+train$dummy_endDay.eBayAuctions_Mon)
summary(fit.reduced)
#run anova test to compare two models- fit.all and fit.reduced
aov<- anova(fit.reduced,fit.all ,test='Chisq')
#Dispersion test on data
residual_df<- aov[2,1]
residual_deviance<- aov[2,2]
dispersion = residual_deviance / residual_df
print(dispersion)
